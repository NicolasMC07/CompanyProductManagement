@page "/products/{companyId:int}"
@using CompanyProductManagement.Models
@using CompanyProductManagement.Services
@inject ICompanyService CompanyService
@inject IProductService ProductService
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime
@inject ILogger<Products> Logger

<h3>Products for @companyName</h3>

@if (errorMessage != null)
{
    <div class="alert alert-danger">@errorMessage</div>
}

<div class="mb-3">
    <button class="btn btn-primary me-2" @onclick="@(() => Navigation.NavigateTo($"/products/add/{companyId}"))">
        Add New Product
    </button>
    <button class="btn btn-secondary" @onclick="@(() => Navigation.NavigateTo("/companies"))">
        Back to Companies
    </button>
</div>

@if (isLoading)
{
    <div class="text-center">
        <div class="spinner-border text-primary" role="status">
            <span class="visually-hidden">Loading...</span>
        </div>
        <p>Loading products...</p>
    </div>
}
else if (products == null || !products.Any())
{
    <div class="alert alert-warning">
        No products found for this company.
    </div>
}
else
{
    <table class="table table-striped">
        <thead>
            <tr>
                <th>Id</th>
                <th>Name</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var product in products)
            {
                <tr>
                    <td>@product.Id</td>
                    <td>@product.Name</td>
                    <td>
                        <button class="btn btn-sm btn-info me-2" @onclick="@(() => EditProduct(product.Id))">
                            Edit
                        </button>
                        <button class="btn btn-sm btn-danger" @onclick="@(() => DeleteProduct(product.Id))">
                            Delete
                        </button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    [Parameter]
    public int companyId { get; set; }

    private List<Product> products = new();
    private string companyName = "Loading...";
    private bool isLoading = true;
    private string? errorMessage;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            // Cargar datos de la compañía y productos en paralelo
            var companyTask = CompanyService.GetCompany(companyId);
            var productsTask = CompanyService.GetCompanyProducts(companyId);

            await Task.WhenAll(companyTask, productsTask);

            var company = await companyTask;
            products = await productsTask;

            companyName = company?.Name ?? "Unknown Company";
        }
        catch (Exception ex)
        {
            errorMessage = "Failed to load products. Please try again later.";
            Logger.LogError(ex, "Error loading products for company {CompanyId}", companyId);
        }
        finally
        {
            isLoading = false;
        }
    }

    private void EditProduct(int id)
    {
        Navigation.NavigateTo($"/products/edit/{id}");
    }

    private async Task DeleteProduct(int id)
    {
        try
        {
            if (await JSRuntime.InvokeAsync<bool>("confirm", "Are you sure you want to delete this product?"))
            {
                isLoading = true;
                StateHasChanged();

                await ProductService.DeleteProduct(id);
                products = await CompanyService.GetCompanyProducts(companyId);
            }
        }
        catch (Exception ex)
        {
            errorMessage = "Failed to delete product. Please try again.";
            Logger.LogError(ex, "Error deleting product {ProductId}", id);
        }
        finally
        {
            isLoading = false;
        }
    }
}