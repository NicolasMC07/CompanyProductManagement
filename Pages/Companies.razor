@page "/companies"
@using CompanyProductManagement.Models
@using CompanyProductManagement.Services
@inject ICompanyService CompanyService
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime
@inject ILogger<Companies> Logger

<h3>Companies</h3>

@if (errorMessage != null)
{
    <div class="alert alert-danger">@errorMessage</div>
}

<button class="btn btn-primary" @onclick="@(() => Navigation.NavigateTo("/companies/add"))">Add New Company</button>

@if (isLoading)
{
    <div class="text-center">
        <div class="spinner-border text-primary" role="status">
            <span class="visually-hidden">Loading...</span>
        </div>
    </div>
}
else if (!companies.Any())
{
    <div class="alert alert-warning">No companies found</div>
}
else
{
    <table class="table table-striped">
        <thead>
            <tr>
                <th>Id</th>
                <th>Name</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var company in companies)
            {
                <tr>
                    <td>@company.Id</td>
                    <td>@company.Name</td>
                    <td>
                        <button class="btn btn-sm btn-info me-2" @onclick="() => EditCompany(company.Id)">
                            Edit
                        </button>
                        <button class="btn btn-sm btn-danger" @onclick="() => DeleteCompany(company.Id)">
                            Delete
                        </button>
                        <button class="btn btn-sm btn-secondary ms-2" @onclick="() => ViewProducts(company.Id)">
                            View Products
                        </button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private List<Company> companies = new();
    private bool isLoading = true;
    private string? errorMessage;

    protected override async Task OnInitializedAsync()
    {
        await LoadCompanies();
    }

    private async Task LoadCompanies()
    {
        try
        {
            isLoading = true;
            companies = await CompanyService.GetCompanies();
        }
        catch (Exception ex)
        {
            errorMessage = "Failed to load companies. Please try again.";
            Logger.LogError(ex, "Error loading companies");
        }
        finally
        {
            isLoading = false;
        }
    }

    private void EditCompany(int id)
    {
        Navigation.NavigateTo($"/companies/edit/{id}");
    }

    private async Task DeleteCompany(int id)
    {
        try
        {
            // Diálogo de confirmación
            bool confirm = await JSRuntime.InvokeAsync<bool>("confirm", 
                "Estas seguro de que quieres eliminar a una compañia?");
            
            if (confirm)
            {
                isLoading = true;
                StateHasChanged();
                
                await CompanyService.DeleteCompany(id);
                await LoadCompanies();
            }
        }
        catch (Exception ex)
        {
            errorMessage = "Failed to delete company. Please try again.";
            Logger.LogError(ex, "Error deleting company {CompanyId}", id);
        }
        finally
        {
            isLoading = false;
        }
    }

    private void ViewProducts(int companyId)
    {
        Navigation.NavigateTo($"/products/{companyId}");
    }
}

